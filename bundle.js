(function (React, ReactDOM, d3$1) {
  'use strict';

  var React__default = 'default' in React ? React['default'] : React;
  ReactDOM = ReactDOM && Object.prototype.hasOwnProperty.call(ReactDOM, 'default') ? ReactDOM['default'] : ReactDOM;

  // function for importing data from the csv file 

  const csvUrl =
    'data.csv';

  const useData = () => {
    const [data, setData] = React.useState(null);

  	React.useEffect( () => {
    	const row = d => {
        // "+" turns strings into numbers 
      	d.value = +d.value;
    	return d;
      };
      d3$1.csv(csvUrl, row).then(setData);
  }, []);
    return data;
  };

  function show_axis(svg, xAxis, yAxis, margin, HEIGHT){
      svg.append("g")
    .attr("class", "xAxis")
    .attr("transform", `translate (${margin.left}, ${HEIGHT - margin.bottom})`)
    .call(xAxis);
    svg.append("g")
      .attr("class", "yAxis")
      .attr("transform", `translate (${margin.left}, ${margin.top})`)
      .call(yAxis);
  }
  const add_labels = ( {svg, WIDTH, HEIGHT, margin} ) => {
    svg.append("text") //xlabel
      .attr("class","label")
      .attr("fill", "black")
      .attr("text-anchor", "middle")
      .attr("transform", function(d,i){
        var xText = WIDTH/2;
        var yText = HEIGHT-1*margin.bottom/3;
        return "translate(" + xText + "," + yText + ") rotate(0)"
      })
      .text("Month");
    svg.append("text") //ylabel
        .attr("fill", "black")
        .attr("text-anchor", "middle")
        .attr("transform", function(d,i){
          var xText = margin.left/3;
          var yText = HEIGHT/2;
          return "translate(" + xText + "," + yText + ") rotate(270)";
        })
        .text("Number of Deaths in Custody");
  };

  const display_mean_line = ( {line_group, data, yScale} ) => {
  			var death_count = d3.range(data.length);
  			for (let i = 0; i < death_count.length; i++) {
  			  death_count[i] = data[i]["value"];
  			}
  			const mean = d3.mean(death_count);
  			 line_group.append("line")
    			.attr("class", "mean_line")
  				.attr("x1",0).attr("x2",innerWidth)
  				.attr("y1",yScale(mean) )
  				.attr("y2",yScale(mean) );
  			 const error = 2 * d3.deviation(death_count) / ((death_count.length-1)**0.5);
  				line_group.append("line")
      		.attr("class", "error_line")
  				.attr("x1",0).attr("x2",innerWidth)
  				.attr("y1",yScale(mean - error))
  				.attr("y2",yScale(mean - error));
  				line_group.append("line")
      		.attr("class", "error_line")
  				.attr("x1",0).attr("x2",innerWidth)
  				.attr("y1",yScale(mean + error))
  				.attr("y2",yScale(mean + error));
  					// return d3.mean(vert_bardata.map(d => d.value))
  };

  const remove_mean_line = ( {line_group} ) => {
      line_group.selectAll("line").remove();
  };

  function change_data_ex(svg, xScale, yScale, xAxis, innerHeight, new_data, duration, delay=0) {
  				//change the axis generator
  				xScale.domain(new_data.map(d => d.key));
  				// yScale.domain([0, d3.max(new_data, d => d.value)]);

  				// change bars
  				var  bars = svg
                      .select(".bars")
                      .selectAll("rect").data(new_data, d => d.key);
  				bars.enter()
  									.append("rect")
  									.attr("x", (d, i) => xScale(d.key))
  									.attr("y", d => yScale(d.value))
  									.attr("width", xScale.bandwidth())
  									.attr("height", d => innerHeight - yScale(d.value))
  									.merge(bars)
  									.transition().delay(delay).duration(duration).ease(d3.easeLinear)
  								 .attr("x", (d, i) => xScale(d.key))
  								 .attr("y", d => yScale(d.value))
  								 .attr("width", xScale.bandwidth())
  								 .attr("height", d => innerHeight - yScale(d.value));
  				bars.exit()
  					.remove();
  				// change axis
  				svg.select(".xAxis")
  				.transition().duration(duration).ease(d3.easeLinear)
  				.call(xAxis);
  				// death_svg.select(".yAxis")
  				// .transition().duration(duration).ease(d3.easeLinear)
  				// .call(yAxis);
  		}

  let line_added = false;
    
  //svg constants
  const svg = d3.select('svg#death_svg');
  const WIDTH = parseFloat(svg.attr('width'));
  const HEIGHT= parseFloat(svg.attr('height'));
  const margin={top: 50, right: 10, bottom: 50, left: 40};
  const innerWidth$1 = WIDTH - margin.left - margin.right;
  const innerHeight = HEIGHT - margin.top - margin.bottom;

  // bar constants 
  const barAdjust = 0; //this is used to change the width of the bar while centered 

  // transition  
  const DURATION = 2000;
  const DELAY = 100;


  const App = () => {
    
    const data = useData();
    if (!data) {
      return React__default.createElement( 'pre', null, "Loading..." );
    }
    console.log(data);

    const xScale = d3.scaleBand()
           .domain(data.map(d => d.key))
           .range([0, innerWidth$1])
           .paddingInner([.2]);

    const yScale = d3.scaleLinear()
       .domain([0, d3.max(data, d => d.value)])
        .range([innerHeight, 0])
        .nice();
    
    const xAxis = d3.axisBottom().scale(xScale);
    const yAxis = d3.axisLeft().scale(yScale);  
    
    // show axis
    show_axis(svg, xAxis, yAxis, margin, HEIGHT);
    
    // add and show bars 
    const bars = svg.append('g')
  												.attr("class", "bars")
  												.attr("transform", `translate (${margin.left}, ${margin.top})`)
  												.selectAll("rect")
  												.data(data, d => d.key);
    bars.enter().append("rect")
          .attr("x", (d, i) => xScale(d.key)+barAdjust)
          .attr("y", d => yScale(d.value))
          .attr("width", xScale.bandwidth()-barAdjust*2)
          .attr("height", d => innerHeight - yScale(d.value));
    // labels
  	add_labels({svg, WIDTH, HEIGHT, margin}); 
    
    // mean line
    const line_group = svg.append("g") //initiate
                         .attr("class","line_group")
                         .attr("transform", `translate (${margin.left}, ${margin.top})`);
    const toggle_line = () => {
        if (line_added == true) {
          remove_mean_line({line_group});
          line_added = false;
        } else {
          display_mean_line({line_group, data, yScale});
          line_added = true;
        }
      };

    // bar transition
    function bar_transition() {
      const new_data = JSON.parse(JSON.stringify(data));
      for (let i = 0; i < new_data.length; i++) {
        new_data[i]["value"] = 10;
      }
  		change_data_ex(svg, xScale, yScale, xAxis,innerHeight,new_data);
  		change_data_ex(svg, xScale, yScale, xAxis,innerHeight,data,DURATION,DELAY);
    }  
    bar_transition();
    
    return (
      React__default.createElement( React__default.Fragment, null,
      React__default.createElement( 'div', { class: 'button-container' },
  				React__default.createElement( 'button', { class: 'buttons', id: 'add_mean', onClick: toggle_line }, "Mean"),
  				React__default.createElement( 'button', { class: 'buttons', id: 'bar_transition', onClick: bar_transition }, "Transition")
  		)
      )
    );
  };



  const rootElement = document.getElementById('root');
  ReactDOM.render(React__default.createElement( App, null ), rootElement);

}(React, ReactDOM, d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,